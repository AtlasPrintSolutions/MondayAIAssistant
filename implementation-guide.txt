# Implementation Guide

This guide provides step-by-step instructions for implementing and running the Monday.com AI Agent.

## Prerequisites

Before you begin, make sure you have:

1. A Monday.com account with API access
2. An OpenRouter.ai account
3. Node.js installed (v16 or higher)
4. Git installed

## Step 1: Clone and Set Up the Project

1. Clone the repository:
   ```bash
   git clone https://github.com/your-username/monday-ai-agent.git
   cd monday-ai-agent
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Copy the example environment file:
   ```bash
   cp .env.example .env
   ```

4. Edit the `.env` file and add your API keys:
   ```
   MONDAY_API_KEY=your_monday_api_key_here
   OPENROUTER_API_KEY=your_openrouter_api_key_here
   ```

## Step 2: Getting Your API Keys

### Monday.com API Key

1. Log in to your Monday.com account
2. Click on your avatar in the bottom-left corner
3. Select "Developers" from the menu
4. In the Developer Center, click on "My API tokens"
5. Generate a new "API v2 Token"
6. Copy the token to your `.env` file

### OpenRouter.ai API Key

1. Create an account at [OpenRouter.ai](https://openrouter.ai/)
2. Navigate to your account settings
3. Create a new API key
4. Copy the key to your `.env` file

## Step 3: Running the Application

### CLI Mode

To run the application in CLI mode:

```bash
npm start
```

This will start the interactive command-line interface where you can type natural language requests.

### Web Server Mode

To run the application as a web server:

```bash
npm run server
```

Or for development with auto-reloading:

```bash
npm run dev
```

Then open your browser to `http://localhost:3000` to access the web interface.

## Step 4: Testing the AI Agent

Try the following example requests to test that everything is working:

1. **Simple board creation**:
   ```
   Create a task management board with status, assignee, and due date columns
   ```

2. **Complex board with groups**:
   ```
   Create a project board with planning, execution, and review groups. Add status, owner, timeline, and priority columns
   ```

3. **Creating items with values**:
   ```
   Create a board named "Marketing Campaigns" with status, budget, and timeline columns. Add an item called "Q2 Social Media Campaign" with a "Working on it" status
   ```

## Advanced Configuration

### Customizing the Model

By default, the agent uses the `google/gemma-7b-it` model from OpenRouter. You can change this by modifying the `OPENROUTER_MODEL` environment variable in your `.env` file.

Some alternatives:
- `anthropic/claude-3-haiku-20240307` - Claude 3 Haiku
- `mistralai/mistral-7b-instruct` - Mistral 7B
- `meta-llama/llama-3-8b-instruct` - Llama 3 8B

### Customizing Column Types

Monday.com supports various column types. The current implementation handles the most common ones, but you can extend the `formatColumnValue` method in `mondayClient.js` to support additional types.

## Troubleshooting

### Common Issues

1. **Authentication Error**:
   - Check that your Monday.com API key is correct and has appropriate permissions
   - Verify that your OpenRouter.ai API key is valid

2. **"Unknown column type" Error**:
   - The agent encountered a column type it doesn't know how to format
   - Add support for the column type in the `formatColumnValue` method

3. **Rate Limiting**:
   - Monday.com has API rate limits (5,000 requests per minute)
   - If you hit the rate limit, wait a few minutes before trying again

4. **Model Response Issues**:
   - If the AI model gives confusing results, try using a different model
   - For complex requests, use the LangChain agent: `!langchain your request`

## Extending the Project

### Adding New Features

To add support for additional Monday.com features:

1. Add new methods to the `mondayClient.js` file
2. Update the `agent.js` file to handle new resource types
3. Add new tools to the LangChain agent if needed

### Improving the UI

The web interface is built with basic Bootstrap. To enhance it:

1. Modify the HTML in `public/index.html`
2. Add custom CSS for styling
3. Enhance the JavaScript for better interactivity

## Deployment

For production deployment:

1. Choose a server or cloud platform (AWS, Heroku, Digital Ocean, etc.)
2. Set up environment variables on your server
3. Deploy the application using your preferred method
4. Ensure your server has Node.js installed

For enhanced security in production:
- Use HTTPS
- Set up proper API key rotation
- Consider implementing rate limiting to prevent abuse
